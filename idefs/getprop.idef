\inst getprop ($obj, $prop)
\when $obj:array && $prop:fixnum \{
  cint n;
  getprop_ARYFIX:
  n = fixnum_to_cint(prop);
  if (0 <= n && n < array_size(obj)) {
    vdst = (n < array_length(obj)) ? array_body_index(obj, n) : JS_UNDEFINED;
  } else {
    prop = fixnum_to_string(prop);
    vdst = get_prop_prototype_chain(obj, prop);
  }
\}

\when $obj:array && $prop:string \{
  JSValue num;
  cint n;
  num = string_to_number(prop);
  if (is_fixnum(num)) goto getprop_ARYFIX;
  else vdst = get_prop_prototype_chain(obj, prop);
\}

\when $obj:array && $prop:flonum \{
  prop = flonum_to_string(prop);
  vdst = get_prop_prototype_chain(obj, prop);
\}

\when $obj:array \{
  prop = to_string(context, prop);
  goto getprop_HEAD;
\}

\when ($obj:regexp || $obj:number_object || $obj:boolean_object || $obj:builtin || $obj:string_object || $obj:simple_object || $obj:iterator || $obj:function) && $prop:string \{
  vdst = get_prop_prototype_chain(obj, prop);
\}

\when ($obj:regexp || $obj:number_object || $obj:boolean_object || $obj:builtin || $obj:string_object || $obj:simple_object || $obj:iterator || $obj:function) \{
  prop = to_string(context, prop);
  vdst = get_prop_prototype_chain(obj, prop);
\}

\when $obj:special \{
  if (obj == JS_UNDEFINED) printf("GETPROP: !!!!!\n");
\}

\otherwise \{
  obj = to_object(context, obj);
  goto getprop_HEAD;
\}

