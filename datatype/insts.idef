\inst I_ADD [$v1, $v2]  ( $dst )
\when $v1:fixnum && $v2:fixnum
cint s = fixnum_to_cint(v1) + fixnum_to_cint(v2);
regbase[dst] = cint_to_number(s);

\when $v1:string && ($v2:fixnum || $v2:flonum || $v2:special)
v2 = to_string(context, v2);
goto I_ADD_STRSTR;

\when ($v1:fixnum || $v1:flonum || $v1:special) && $v2:string
v1 = to_string(context, v1);
goto I_ADD_STRSTR;

\when $v1:string && $v2:string
I_ADD_STRSTR:
regbase[dst] = cstr_to_string2(context, string_to_cstr(v1), string_to_cstr(v2));

\when ($v1:regexp || $v1:number_object || $v1:boolean_object || $v1:builtin || $v1:string_object || $v1:simple_object || $v1:array || $v1:iterator || $v1:function) && ($v2:fixnum || $v2:flonum || $v2:special || $v2:string)
v1 = object_to_string(context, v1);
goto I_ADD_HEAD;

\when ($v2:regexp || $v2:number_object || $v2:boolean_object || $v2:builtin || $v2:string_object || $v2:simple_object || $v2:array || $v2:iterator || $v2:function) && ($v1:fixnum || $v1:flonum || $v1:special || $v1:string)
v2 = object_to_string(context, v2);
goto I_ADD_HEAD;

\when ($v1:regexp || $v1:number_object || $v1:boolean_object || $v1:builtin || $v1:string_object || $v1:simple_object || $v1:array || $v1:iterator || $v1:function) && ($v2:regexp || $v2:number_object || $v2:boolean_object || $v2:builtin || $v2:string_object || $v2:simple_object || $v2:array || $v2:iterator || $v2:function)
v1 = object_to_string(context, v1);
v2 = object_to_string(context, v2);
goto I_ADD_HEAD;

\otherwise
double x1 = to_double(context, v1);
double x2 = to_double(context, v2);
regbase[dst] = double_to_number(x1 + x2);



\inst I_SUB [$v1, $v2] ( $vdst )
\when $v1:fixnum && $v2:fixnum
cint s = fixnum_to_cint(v1) - fixnum_to_cint(v2);
vdst = cint_to_number(s);

\when ($v1:fixnum && $v2:flonum) || ($v1:flonum && $v2:fixnum) || ($v1:flonum && $v2:flonum)
vdst = double_to_number(to_double(context, v1) - to_double(context, v2));

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v1);
goto I_SUB_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_SUB_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_SUB_HEAD;



\inst I_MUL [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
cint n1, n2, p;
n1 = fixnum_to_cint(v1);
n2 = fixnum_to_cint(v2);
if (half_fixnum_range(n1) && half_fixnum_range(n2)) {
  p = n1 * n2;
  vdst = cint_to_fixnum(p);
} else {
  p = (double) n1 * (double) n2;
  vdst = double_to_number(p);
}

\when ($v1:fixnum && $v2:flonum) || ($v1:flonum && $v2:fixnum) || ($v1:flonum && $v2:flonum)
double x1 = to_double(context, v1);
double x2 = to_double(context, v2);
vdst = double_to_number(x1 * x2);

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v2);
goto I_MUL_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_MUL_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_MUL_HEAD;



\inst I_DIV [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
int n1, n2, s;
n1 = fixnum_to_cint(v1);
if (v2 == FIXNUM_ZERO) {
  if (n1 > 0) vdst = gconsts.g_flonum_infinity;
  else if (n1 == 0) vdst = gconsts.g_flonum_nan;
  else vdst = gconsts.g_flonum_negative_infinity;
} else {
  n2 = fixnum_to_cint(v2);
  s = n1/ n2;
  vdst = (n1 == n2 * s) ? cint_to_fixnum(s) : double_to_flonum((double) n1 / (double) n2);
}

\when ($v1:fixnum && $v2:flonum) || ($v1:flonum && $v2:fixnum) || ($v1:flonum && $v2:flonum)
double x1 = to_double(context, v1);
double x2 = to_double(context, v2);
double d = x1 / x2;
if (isinf(d)) vdst = d > 0 ? gconsts.g_flonum_infinity : gconsts.g_flonum_negative_infinity;
else if (isnan(d)) vdst = gconsts.g_flonum_nan;
else vdst = double_to_number(d);

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v2);
goto I_DIV_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_DIV_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_DIV_HEAD;



\inst I_MOD [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
if (v2 == FIXNUM_ZERO)
  vdst = gconsts.g_flonum_nan;
else {
  cint s = fixnum_to_cint(v1) % fixnum_to_cint(v2);
  vdst = cint_to_fixnum(s);
}

\when ($v1:fixnum && $v2:flonum) || ($v1:flonum && $v2:fixnum) || ($v1:flonum && $v2:flonum)
double x1 = to_double(context, v1);
double x2 = to_double(context, v2);
double d;
if (isinf(x1) || x2 == 0.0f)
  vdst = gconsts.g_flonum_nan;
else {
  d = x1 / x2;
  d = d >= 0? floor(d) : ceil(d);
  d = x1 - (d * x2);
  vdst = double_to_number(d);
}

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v2);
goto I_MOD_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_MOD_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_MOD_HEAD;



\inst I_BITAND [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
vdst = v1 & v2;

\when $v1:fixnum && $v2:flonum
cint x1 = fixnum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum(x1 & x2);

\when $v1:flonum && $v2:fixnum
cint x1 = flonum_to_cint(v1);
cint x2 = fixnum_to_cint(v2);
vdst = cint_to_fixnum(x1 & x2);

\when $v1:flonum && $v2:flonum
cint x1 = flonum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum(x1 & x2);

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v2);
goto I_BITAND_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_BITAND_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_BITAND_HEAD;



\inst I_BITOR [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
vdst = v1 | v2;

\when $v1:fixnum && $v2:flonum
cint x1 = fixnum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum(x1 | x2);

\when $v1:flonum && $v2:fixnum
cint x1 = flonum_to_cint(v1);
cint x2 = fixnum_to_cint(v2);
vdst = cint_to_fixnum(x1 | x2);

\when $v1:flonum && $v2:flonum
cint x1 = flonum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum(x1 | x2);

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v2);
goto I_BITOR_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_BITOR_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_BITOR_HEAD;



\inst I_LEFTSHIFT [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
int32_t x1 = (int32_t) fixnum_to_cint(v1);
cint x2 = fixnum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 << x2));

\when $v1:fixnum && $v2:flonum
int32_t x1 = (int32_t) fixnum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 << x2));

\when $v1:flonum && $v2:fixnum
int32_t x1 = (int32_t) flonum_to_cint(v1);
cint x2 = fixnum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 << x2));

\when $v1:flonum && $v2:flonum
int32_t x1 = (int32_t) flonum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 << x2));

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v2);
goto I_LEFTSHIFT_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_LEFTSHIFT_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_LEFTSHIFT_HEAD;



\inst I_RIGHTSHIFT [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
int32_t x1 = (int32_t) fixnum_to_cint(v1);
cint x2 = fixnum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 >> x2));

\when $v1:fixnum && $v2:flonum
int32_t x1 = (int32_t) fixnum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 >> x2));

\when $v1:flonum && $v2:fixnum
int32_t x1 = (int32_t) flonum_to_cint(v1);
cint x2 = fixnum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 >> x2));

\when $v1:flonum && $v2:flonum
int32_t x1 = (int32_t) flonum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 >> x2));

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v2);
goto I_RIGHTSHIFT_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_RIGHTSHIFT_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_RIGHTSHIFT_HEAD;



\inst I_UNSIGNEDRIGHTSHIFT [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
uint32_t x1 = (uint32_t) fixnum_to_cint(v1);
cint x2 = fixnum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 >> x2));

\when $v1:fixnum && $v2:flonum
int32_t x1 = (uint32_t) fixnum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 >> x2));

\when $v1:flonum && $v2:fixnum
int32_t x1 = (uint32_t) flonum_to_cint(v1);
cint x2 = fixnum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 >> x2));

\when $v1:flonum && $v2:flonum
int32_t x1 = (uint32_t) flonum_to_cint(v1);
cint x2 = flonum_to_cint(v2);
vdst = cint_to_fixnum((cint) (x1 >> x2));

\when $v1:fixnum || $v1:flonum
v2 = to_number(context, v2);
goto I_UNSIGNEDRIGHTSHIFT_HEAD;

\when $v2:fixnum || $v2:flonum
v1 = to_number(context, v1);
goto I_UNSIGNEDRIGHTSHIFT_HEAD;

\otherwise
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_UNSIGNEDRIGHTSHIFT_HEAD;



\inst I_LESSTHAN [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
vdst = true_false((int64_t) v1 < (int64_t) v2);

\when ($v1:fixnum && $v2:flonum) || ($v1:flonum && $v2:fixnum) || ($v1:flonum && $v2:flonum)
double x1 = to_double(context, v1);
double x2 = to_double(context, v2);
vdst = true_false(x1 < x2);

\when $v1:string && $v2:string
vdst = true_false(strcmp(string_to_cstr(v1), string_to_cstr(v2)) < 0);

\when ($v1:special && $v2:special) || ($v1:special && $v2:string) || ($v1:string && $v2:special)
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_LESSTHAN_HEAD;

\when ($v1:string || $v1:special) && ($v2:fixnum || $v2:flonum)
v1 = to_number(context, v1);
goto I_LESSTHAN_HEAD;

\when ($v1:fixnum || $v1:flonum) && ($v2:string || $v2:special)
v2 = to_number(context, v2);
goto I_LESSTHAN_HEAD;

\when ($v1:regexp || $v1:number_object || $v1:boolean_object || $v1:builtin || $v1:string_object || $v1:simple_object || $v1:array || $v1:iterator || $v1:function) && ($v2:fixnum || $v2:flonum || $v2:string || $v2:special)
v1 = object_to_primitive(context, v1, HINT_NUMBER);
goto I_LESSTHAN_HEAD;

\when ($v1:fixnum || $v1:flonum || $v1:string || $v1:special) && ($v2:regexp || $v2:number_object || $v2:boolean_object || $v2:builtin || $v2:string_object || $v2:simple_object || $v2:array || $v2:iterator || $v2:function)
v2 = object_to_primitive(context, v2, HINT_NUMBER);
goto I_LESSTHAN_HEAD;

\otherwise
v1 = object_to_primitive(context, v1, HINT_NUMBER);
v2 = object_to_primitive(context, v2, HINT_NUMBER);
goto I_LESSTHAN_HEAD;



\inst I_LESSTHANEQUAL [$v1, $v2] ($vdst)
\when $v1:fixnum && $v2:fixnum
vdst = true_false((int64_t) v1 <= (int64_t) v2);

\when ($v1:fixnum && $v2:flonum) || ($v1:flonum && $v2:fixnum) || ($v1:flonum && $v2:flonum)
double x1 = to_double(context, v1);
double x2 = to_double(context, v2);
vdst = true_false(x1 <= x2);

\when $v1:string && $v2:string
vdst = true_false(strcmp(string_to_cstr(v1), string_to_cstr(v2)) <= 0);

\when ($v1:special && $v2:special) || ($v1:special && $v2:string) || ($v1:string && $v2:special)
v1 = to_number(context, v1);
v2 = to_number(context, v2);
goto I_LESSTHANEQUAL_HEAD;

\when ($v1:string || $v1:special) && ($v2:fixnum || $v2:flonum)
v1 = to_number(context, v1);
goto I_LESSTHANEQUAL_HEAD;

\when ($v1:fixnum || $v1:flonum) && ($v2:string || $v2:special)
v2 = to_number(context, v2);
goto I_LESSTHANEQUAL_HEAD;

\when ($v1:regexp || $v1:number_object || $v1:boolean_object || $v1:builtin || $v1:string_object || $v1:simple_object || $v1:array || $v1:iterator || $v1:function) && ($v2:fixnum || $v2:flonum || $v2:string || $v2:special)
v1 = object_to_primitive(context, v1, HINT_NUMBER);
goto I_LESSTHANEQUAL_HEAD;

\when ($v1:fixnum || $v1:flonum || $v1:string || $v1:special) && ($v2:regexp || $v2:number_object || $v2:boolean_object || $v2:builtin || $v2:string_object || $v2:simple_object || $v2:array || $v2:iterator || $v2:function)
v2 = object_to_primitive(context, v2, HINT_NUMBER);
goto I_LESSTHANEQUAL_HEAD;

\otherwise
v1 = object_to_primitive(context, v1, HINT_NUMBER);
v2 = object_to_primitive(context, v2, HINT_NUMBER);
goto I_LESSTHANEQUAL_HEAD;



\inst I_EQ [$v1, $v2] ($vdst)
\when $v1:flonum && $v2:flonum
double x1 = flonum_to_double(v1);
double x2 = flonum_to_double(v2);
vdst = true_false(x1 == x2);

\otherwise
if (v1 == v2) vdst = false_true(is_nan(v1));
else vdst = JS_FALSE;



\inst I_EQUAL [$v1, $v2] ($vdst)
\when ($v1:fixnum && $v2:fixnum) || ($v1:string && $v2:string)
if (v1 == v2) vdst = JS_TRUE;
else vdst = JS_FALSE;

\when ($v1:fixnum && $v2:flonum) || ($v1:flonum && $v2:fixnum) || ($v1:special && $v2:flonum) || ($v1:flonum && $v2:special)
vdst = JS_FALSE;

\when $v1:flonum && $v2:flonum
double x1, x2;
if (v1 == v2) {
  vdst = false_true(is_nan(v1));
} else {
  x1 = flonum_to_double(v1);
  x2 = flonum_to_double(v2);
  vdst = true_false(x1 == x2);
}

\when $v1:special && $v2:special
vdst = true_false((is_undefined(v1) && is_null(v2)) || (is_undefined(v2) && is_null(v1)));

\when $v1:string && $v2:fixnum
v1 = string_to_number(v1);
vdst = true_false(v1 == v2);

\when $v1:string && $v2:flonum
I_EQUAL_STRFIX:
v1 = string_to_number(v1);
goto I_EQUAL_HEAD;

\when $v1:fixnum && $v2:string
I_EQUAL_FIXSTR:
v2 = string_to_number(v2);
vdst = true_false(v1 == v2);

\when $v1:flonum && $v2:string
v2 = string_to_number(v2);
goto I_EQUAL_HEAD;

\when $v1:special && $v2:fixnum
if (v1 == JS_UNDEFINED) vdst = JS_FALSE;
else if (v1 == JS_NULL) vdst = JS_FALSE;
else {
  if (v1 == JS_TRUE) v1 = FIXNUM_ONE;
  else if (v1 == JS_FALSE) v1 = FIXNUM_ZERO;
  vdst = true_false(v1 == v2);
}

\when $v1:fixnum && $v2:special
if (v2 == JS_UNDEFINED) vdst = JS_FALSE;
else if (v2 == JS_NULL) vdst = JS_FALSE;
else {
  if (v2 == JS_TRUE) v2 = FIXNUM_ONE;
  else if (v2 == JS_FALSE) v2 = FIXNUM_ZERO;
  vdst = true_false(v1 == v2);
}

\when $v1:special && $v2:string
if (v1 == JS_UNDEFINED) vdst = JS_FALSE;
else if (v1 == JS_NULL) vdst = JS_FALSE;
else {
  if (v1 == JS_TRUE) v1 = FIXNUM_ONE;
  else if (v1 == JS_FALSE) v1 = FIXNUM_ZERO;
  goto I_EQUAL_FIXSTR;
}

\when $v1:string && $v2:special
if (v2 == JS_UNDEFINED) vdst = JS_FALSE;
else if (v2 == JS_NULL) vdst = JS_FALSE;
else {
  if (v2 == JS_TRUE) v2 = FIXNUM_ONE;
  else if (v2 == JS_FALSE) v2 = FIXNUM_ZERO;
  goto I_EQUAL_STRFIX;
}

\when ($v1:regexp || $v1:number_object || $v1:boolean_object || $v1:builtin || $v1:string_object || $v1:simple_object || $v1:array || $v1:iterator || $v1:function) && $v2:fixnum
v1 = object_to_primitive(context, v1, HINT_NUMBER);
vdst = true_false(v1 == v2);

\when ($v1:flonum || $v1:string || $v1:special) && ($v2:regexp || $v2:number_object || $v2:boolean_object || $v2:builtin || $v2:string_object || $v2:simple_object || $v2:array || $v2:iterator || $v2:function)
v2 = object_to_primitive(context, v2, HINT_NUMBER);
vdst = true_false(v1 == v2);

\when ($v1:regexp || $v1:number_object || $v1:boolean_object || $v1:builtin || $v1:string_object || $v1:simple_object || $v1:array || $v1:iterator || $v1:function) && ($v2:flonum || $v2:string || $v2:special)
v1 = object_to_primitive(context, v1, HINT_NUMBER);
goto I_EQUAL_HEAD;

\when $v1:fixnum && ($v2:regexp || $v2:number_object || $v2:boolean_object || $v2:builtin || $v2:string_object || $v2:simple_object || $v2:array || $v2:iterator || $v2:function)
v2 = object_to_primitive(context, v2, HINT_NUMBER);
goto I_EQUAL_HEAD;

\otherwise
if (v1 == v2) vdst = JS_TRUE;
else vdst = JS_FALSE;