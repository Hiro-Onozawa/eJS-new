(needContext, triggerGC)
toNumber : JSValue -> Number
toNumber (v) {
}
(vmInstruction, needContext, tailCall)
leftshift : (JSValue, JSValue) -> Fixnum
leftshift (v1, v2) {
}

numberToCdouble : Number -> cdouble
numberToCdouble (v) {
}

externC constant JSValue Flonum_Infinity    = "gconsts.g_flonum_infinity";
externC constant JSValue Flonum_NegInfinity = "gconsts.g_flonum_negative_infinity";
externC constant JSValue Flonum_Nan         = "gconsts.g_flonum_nan";
externC constant JSValue Fixnum_Zero        = "FIXNUM_ZERO";


externC (needContext)
Get_ac : () -> cint


(vmInstruction, needContext, triggerGC, tailCall)
add : (JSValue, JSValue) -> JSValue
add (v1, v2) {
  Number u1 = toNumber(v1);
  if (u1 == Flonum_Infinity || u1 == Flonum_NegInfinity || u1 == Flonum_Nan) {
    return leftshift(Fixnum_Zero, v2);
  } else {
    return leftshift(u1, v2);
  }
  cdouble x1 = numberToCdouble(v1);
  cdouble x2 = numberToCdouble(v2);
  return x1 < x2 ? true : false;

/*
  cint na = Get_ac();

  do (cint i=0 step i+1) {
    if (na < i) {
      break;
    }
  }
*/
  //cint newpc;
  //cint handler_fp;
  //(newpc, handler_fp) <- Exhandler_stack_pop(a);
  
//  Set_a(1.0f, "abcd");
}
